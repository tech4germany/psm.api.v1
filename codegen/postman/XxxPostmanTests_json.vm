## ---------- 
{
	"variables": [],
	"info": {
		"name": "REST API tests for psm-service",
		"description": "PostMan tests generated by Telosys",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
#foreach( $entity in $selectedEntities )
##checkId($entity)
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## 2 variables must be defined :
## $REST_URL_ROOT ( eg "http://localhost:3000" or "http://localhost:8080/project-name" )
## $REST_API_ROOT ( eg "/api/v1" )
#set ($REST_URL_ROOT = "https://psm.redlich.space:8443/ords/psm" )
#set ($REST_API_ROOT = "/api-v1" )
#using("REST_URL_ROOT", "REST_API_ROOT" )
#set ( $URL_ROOT = "${REST_URL_ROOT}${REST_API_ROOT}" )
##--- Build LITERAL VALUES for JAVASCRIPT LANGUAGE
$env.setLanguage('JavaScript') 
#set ( $values = $fn.buildValues($entity.attributes, 1) )
## REQUEST BODY ( JSON String ) 
#set ( $body = $values.toJSON("\n\t", "\n") )
#set ( $requestBody = $fn.backslash( $body, $QUOT) )
## REQUEST URL PARAM FOR PRIMARY KEY
#set ( $requestIdParams = '' )
#foreach ( $keyAttrib in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $requestIdParams = $requestIdParams + '/' )
#end
#set ( $requestIdParams = $requestIdParams + $fn.unquote( $values.getValue(${keyAttrib.name}) ) )
#end
## ---------- FIND ALL ENTITIES
		{
			"name": "$entity - FIND ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [

							"// Test if response code is always 200 (a list is expected, void list if nothing) ",
							"tests[\"Status code is always 200\"] = ( responseCode.code === 200 ) ;",
							"",

							"if ( responseCode.code === 200 ) {",
    							"// 200 OK (found) => Body expected in the response",
								"tests[\"Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
								"tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
    							"tests[\"Has body\"] = responseBody ;",
								"tests[\"Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "FIND ALL with GET method"
			},
			"response": []
		},

## ---------- FIND ONE ENTITY
		{
			"name": "$entity - FIND ONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [

							"// Test if response code is 200 or 404",
							"tests[\"Status code is 200 or 404\"] = ( responseCode.code === 200 || responseCode.code === 404 ) ;",
							"",

							"if ( responseCode.code === 200 ) {",
    							"// 200 OK (found) => Body expected in the response",
								"tests[\"200 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
								"tests[\"200 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
    							"tests[\"200 => Has body\"] = responseBody ;",
								"tests[\"200 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",

							"if ( responseCode.code === 404 ) {",
    							"// 404 NOT FOUND => No body expected in the response",
								"tests[\"404 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");" ,
    							"tests[\"404 => No body\"] = ( ! responseBody ) ;",
							"}",
							"",

							""
						]
					}
				}
			],
			"request": {
				"url": "${URL_ROOT}/$uncapitalizedEntityName/$requestIdParams",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "FIND ONE with GET method"
			},
			"response": []
		},
#end

	]
}